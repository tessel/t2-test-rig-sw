extends layout

block head
  script
    $(function(){
      var STATUS_COLORS = {'In Progress': '#f08a24', 'Pass': '#43AC6A', 'Fail': '#f04124', 'Disabled': '#CACACA'};
      var TESTS = !{JSON.stringify(tests)};
      TESTS.push('notes'); // add notes as an extra column
      function switchStatus(text, ele) {
        $(ele.children('.statusText')[0]).html(text);
        ele.css('background-color', STATUS_COLORS[text] ? STATUS_COLORS[text] : '');
      }
      var socket = io.connect();
      socket.on('message', function(data){
        console.log("emit message", data);
        var flashEle = $('#flash');
        // data.message = message to flash
        // data.lock = allow/disallow testing
        flashEle.html(data.message);
        flashEle.show();
        if (!data.lock) {
          // message fades within 10 seconds
          flashEle.css('background-color', 'rgb(255, 233, 121)');
          flashEle.fadeOut(10*1000);
        } else {
          flashEle.css('background-color', 'red');
        }
      });
      socket.on('addNote', function(data){
        console.log("adding note", data);
        var rig = data.serialNumber;
        var note = data.note;
        $($('#'+rig+'-notes-status').children('.statusText')[0]).html(note);
      });
      socket.on('updateTest', function(data){
        console.log("update test received", data);
        // update rig with device id
        var rig = data.serialNumber;
        var device = data.deviceId;
        var test = data.test;
        var status = data.status;
        var rigEle = $("#"+rig);
        // check which test
        if (test == 'all') {
          // $("#"+rig+"-test-all").show();
          // tests all passed or failed
          if (status == 1) {
            rigEle.css('background-color', STATUS_COLORS['Pass']);
          } else {
            rigEle.css('background-color', STATUS_COLORS['Fail']);
          }
        } else {
          // clear out note
          $($('#'+rig+'-notes-status').children('.statusText')[0]).html('');
          // change status to inprogress
            rigEle.css('background-color', STATUS_COLORS['In Progress']);
          // find the test, mark it as passed or failed
          if (status == 1) {
            switchStatus("Pass", $("#"+rig+"-"+test+"-status"));
          } else if (status < 0) {
            switchStatus("Fail", $("#"+rig+"-"+test+"-status"));
          } else if (status == 0) {
            switchStatus("In Progress", $("#"+rig+"-"+test+"-status"));
          }
        }
        $('#'+rig+"-device").html(device);
      });
      function clearAll(rigEle){
        var statusEles = rigEle.find(".testingStatus");
        statusEles.each(function(i, ele){
          $(ele).css('background-color', '');
          $($(ele).find('.statusText')[0]).html('');
        });
        rigEle.css('background-color', '');
      }
      socket.on('addRig', function(rig){
        var rigEle = $('#'+rig.serialNumber);
        if (rigEle.length > 0) {
          // we already have this rig on the UI
          rigEle.css('background-color', 'white');
          rigEle.css('opacity', '1');
          clearAll(rigEle);
        } else {
          rigEle = $('<tr>')
            .append($('<td>').text(rig.serialNumber))
            .attr("id", rig.serialNumber)
            .append($('<td>').text(rig.build))
            .append($('<td>').attr("id", rig.serialNumber+"-device"));
          TESTS.forEach(function(test){
            rigEle.append($('<td>').addClass("testingStatus "+rig.serialNumber+"-status").attr("id", rig.serialNumber+"-"+test+"-status")
              .append($("<div>").addClass("statusText"))
              // .append($("<div>").addClass("button test retry").attr("rig", rig.serialNumber).attr("test", test).text("Test"))
            );
          });
          // rigEle.append($('<td>').attr('id', rig.serialNumber+'-notes').addClass("testingStatus").append($('<div>').addClass("statusText")));
          $('#smtBody').append(rigEle);
        }
      });
      socket.on('startTest', function(serial){
        var rigEle = $('#'+serial);
        clearAll(rigEle);
      });
      socket.on('removeRig', function(rig){
        // find the rig
        var rigEle = $('#'+rig.serialNumber);
        // gray it out
        rigEle.css('background-color', STATUS_COLORS['Disabled']);
      });
      $('#js_smt').on('click', function(){
        // is on smt test
        socket.emit('smt', true);
      });
      $('#js_th').on('click', function(){
        // is on through hole test
        console.log('yeah smt');
        socket.emit('smt', false);
      });
      socket.on('addTesselUSB', function(data){
        console.log('added tessel usb');
        var thTests = ['boot', 'name', 'usb', 'eth', 'notes'];
        // add to the row of tessel devices
        var tesselEle = $('<tr>')
        .attr("id", data.serialNumber)
        .append($('<td>').html(data.serialNumber));
        thTests.forEach(function(test){
          tesselEle.append($('<td>').addClass('testingStatus').attr('id', data.serialNumber+'-'+test+'-status').append($('<div>').addClass('statusText')))
        });
        console.log("tessel ele", tesselEle);
        $('#thBody').append(tesselEle);
      });
      socket.on('removeTesselUSB', function(data){
        // remove that tessel element
        $('#'+data.serialNumber).remove();
      });
      socket.on('updateThTest', function(data){
        console.log("updating th test", data);
        var test = data.test;
        var tessel = data.tessel.serialNumber;
        var tesselEle = $('#'+tessel);
        var status = data.status;
        if (test == 'all') {
          // everything passed
          if (status == 1) {
            tesselEle.css('background-color', STATUS_COLORS['Pass']);
          } else {
            tesselEle.css('background-color', STATUS_COLORS['Fail']);
          }
        } else {
          // clear out note
          $($('#'+tessel+'-notes-status').children('.statusText')[0]).html('');
          if (status == 1) {
            switchStatus("Pass", $("#"+tessel+"-"+test+"-status"));
          } else if (status < 0) {
            switchStatus("Fail", $("#"+tessel+"-"+test+"-status"));
          } else if (status == 0) {
            switchStatus("In Progress", $("#"+tessel+"-"+test+"-status"));
          }
        }
      })
      socket.on('updateHostData', function(data) {
        console.log('updating host data', data);

        var hostData = $('#hostDataBody');

        // Delete all existing table rows
        hostData.empty();

        var buildsDetails = JSON.parse(data);
        var binaries = Object.keys(buildsDetails);

        binaries.forEach(function(binary) {
          var details = buildsDetails[binary];
          var row = $('<tr>');

          // Cell 1 (name and URL)
          var urlCell = $('<td>');
          var buildLink = $('<a>', {href: '/bin/' + binary + '.bin' });
          buildLink.text(binary)
          urlCell.append(buildLink);
          row.append(urlCell);

          // Cell 2 (md5sum)
          var md5Cell = $('<td>');
          md5Cell.text(buildsDetails[binary].md5sum)
          row.append(md5Cell);

          // Cell 3 (build)
          var buildCell = $('<td>');
          buildCell.text(buildsDetails[binary].build)
          row.append(buildCell);

          // Cell 4 (last updated)
          var timeCell = $('<td>');
          timeCell.text(new Date(buildsDetails[binary].time))
          row.append(timeCell);

          // Add the row
          hostData.append(row);
        });
      });
    })

block content
  h3 Host #{host.name} | build: #{host.build}
  .hostData
    table#hostDataTable
      thead
        tr
          th Binary
          th MD5
          th Build
          th Updated
      tbody#hostDataBody
        each val, key in builds
          tr
            td
              a(href="/bin/#{key}.bin") #{key}
            td
              | #{val.md5sum}
            td
              | #{val.build}
            td
              | #{val.time}

  p

  .section-container.tabs(data-section="tabs")
    section.active
      p.title(data-section-title)#js_smt
        a(href="#") Programming & SMT
      .content(data-section-content)
        table
          thead
            tr
              th Rig
              th Build
              th Device
              each test in tests
                th #{test}
              th Notes
          tbody#smtBody
              each rig in rigs
                tr(id="#{rig.serialNumber}")
                  td
                    | #{rig.serialNumber}
                  td
                    | #{rig.build}
                  td(id="#{rig.serialNumber}-device")
                    | #{rig.device}
                  each test in tests
                    td.testingStatus(class="#{rig.serialNumber}-status", id="#{rig.serialNumber}-#{test}-status")
                      .div.statusText
                  td.testingStatus(id="#{rig.serialNumber}-notes-status")
                    .div.statusText
    section
      p.title(data-section-title)#js_th
        a(href="#") Through Hole tests
      .content(data-section-content)
        table
          thead
            tr
              th Device
              th Boot
              th Name
              th USB
              th Ethernet
              th Notes
          tbody#thBody
            each device in devices
              tr(id="#{device.serialNumber}")
                td
                  | #{device.serialNumber}
                td.testingStatus(id="#{device.serialNumber}-boot-status")
                    .div.statusText
                td.testingStatus(id="#{device.serialNumber}-name-status")
                  .div.statusText
                td.testingStatus(id="#{device.serialNumber}-usb-status")
                  .div.statusText
                td.testingStatus(id="#{device.serialNumber}-eth-status")
                  .div.statusText
                td.testingStatus(id="#{device.serialNumber}-notes-status")
                  .div.statusText
